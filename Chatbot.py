{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNjAYlvhYceUa3sDu8BXKq3"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["!pip install chatterbot"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vQFbJ82yAYfA","executionInfo":{"status":"ok","timestamp":1748571942015,"user_tz":-330,"elapsed":3650,"user":{"displayName":"Rajat veer","userId":"09973636553088577408"}},"outputId":"0d865f99-8519-4d00-fa19-0461f6f9146d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting chatterbot\n","  Downloading chatterbot-1.2.6-py3-none-any.whl.metadata (7.2 kB)\n","Collecting mathparse<0.2,>=0.1 (from chatterbot)\n","  Downloading mathparse-0.1.5-py3-none-any.whl.metadata (2.0 kB)\n","Requirement already satisfied: python-dateutil<2.10,>=2.9 in /usr/local/lib/python3.11/dist-packages (from chatterbot) (2.9.0.post0)\n","Requirement already satisfied: sqlalchemy<2.1,>=2.0 in /usr/local/lib/python3.11/dist-packages (from chatterbot) (2.0.41)\n","Requirement already satisfied: spacy<3.9,>=3.8 in /usr/local/lib/python3.11/dist-packages (from chatterbot) (3.8.6)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from chatterbot) (4.67.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil<2.10,>=2.9->chatterbot) (1.17.0)\n","Requirement already satisfied: spacy-legacy<3.1.0,>=3.0.11 in /usr/local/lib/python3.11/dist-packages (from spacy<3.9,>=3.8->chatterbot) (3.0.12)\n","Requirement already satisfied: spacy-loggers<2.0.0,>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from spacy<3.9,>=3.8->chatterbot) (1.0.5)\n","Requirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /usr/local/lib/python3.11/dist-packages (from spacy<3.9,>=3.8->chatterbot) (1.0.12)\n","Requirement already satisfied: cymem<2.1.0,>=2.0.2 in /usr/local/lib/python3.11/dist-packages (from spacy<3.9,>=3.8->chatterbot) (2.0.11)\n","Requirement already satisfied: preshed<3.1.0,>=3.0.2 in /usr/local/lib/python3.11/dist-packages (from spacy<3.9,>=3.8->chatterbot) (3.0.9)\n","Requirement already satisfied: thinc<8.4.0,>=8.3.4 in /usr/local/lib/python3.11/dist-packages (from spacy<3.9,>=3.8->chatterbot) (8.3.6)\n","Requirement already satisfied: wasabi<1.2.0,>=0.9.1 in /usr/local/lib/python3.11/dist-packages (from spacy<3.9,>=3.8->chatterbot) (1.1.3)\n","Requirement already satisfied: srsly<3.0.0,>=2.4.3 in /usr/local/lib/python3.11/dist-packages (from spacy<3.9,>=3.8->chatterbot) (2.5.1)\n","Requirement already satisfied: catalogue<2.1.0,>=2.0.6 in /usr/local/lib/python3.11/dist-packages (from spacy<3.9,>=3.8->chatterbot) (2.0.10)\n","Requirement already satisfied: weasel<0.5.0,>=0.1.0 in /usr/local/lib/python3.11/dist-packages (from spacy<3.9,>=3.8->chatterbot) (0.4.1)\n","Requirement already satisfied: typer<1.0.0,>=0.3.0 in /usr/local/lib/python3.11/dist-packages (from spacy<3.9,>=3.8->chatterbot) (0.15.3)\n","Requirement already satisfied: numpy>=1.19.0 in /usr/local/lib/python3.11/dist-packages (from spacy<3.9,>=3.8->chatterbot) (2.0.2)\n","Requirement already satisfied: requests<3.0.0,>=2.13.0 in /usr/local/lib/python3.11/dist-packages (from spacy<3.9,>=3.8->chatterbot) (2.32.3)\n","Requirement already satisfied: pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4 in /usr/local/lib/python3.11/dist-packages (from spacy<3.9,>=3.8->chatterbot) (2.11.4)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from spacy<3.9,>=3.8->chatterbot) (3.1.6)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.11/dist-packages (from spacy<3.9,>=3.8->chatterbot) (75.2.0)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from spacy<3.9,>=3.8->chatterbot) (24.2)\n","Requirement already satisfied: langcodes<4.0.0,>=3.2.0 in /usr/local/lib/python3.11/dist-packages (from spacy<3.9,>=3.8->chatterbot) (3.5.0)\n","Requirement already satisfied: greenlet>=1 in /usr/local/lib/python3.11/dist-packages (from sqlalchemy<2.1,>=2.0->chatterbot) (3.2.2)\n","Requirement already satisfied: typing-extensions>=4.6.0 in /usr/local/lib/python3.11/dist-packages (from sqlalchemy<2.1,>=2.0->chatterbot) (4.13.2)\n","Requirement already satisfied: language-data>=1.2 in /usr/local/lib/python3.11/dist-packages (from langcodes<4.0.0,>=3.2.0->spacy<3.9,>=3.8->chatterbot) (1.3.0)\n","Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy<3.9,>=3.8->chatterbot) (0.7.0)\n","Requirement already satisfied: pydantic-core==2.33.2 in /usr/local/lib/python3.11/dist-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy<3.9,>=3.8->chatterbot) (2.33.2)\n","Requirement already satisfied: typing-inspection>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy<3.9,>=3.8->chatterbot) (0.4.1)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.9,>=3.8->chatterbot) (3.4.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.9,>=3.8->chatterbot) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.9,>=3.8->chatterbot) (2.4.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.9,>=3.8->chatterbot) (2025.4.26)\n","Requirement already satisfied: blis<1.4.0,>=1.3.0 in /usr/local/lib/python3.11/dist-packages (from thinc<8.4.0,>=8.3.4->spacy<3.9,>=3.8->chatterbot) (1.3.0)\n","Requirement already satisfied: confection<1.0.0,>=0.0.1 in /usr/local/lib/python3.11/dist-packages (from thinc<8.4.0,>=8.3.4->spacy<3.9,>=3.8->chatterbot) (0.1.5)\n","Requirement already satisfied: click>=8.0.0 in /usr/local/lib/python3.11/dist-packages (from typer<1.0.0,>=0.3.0->spacy<3.9,>=3.8->chatterbot) (8.2.1)\n","Requirement already satisfied: shellingham>=1.3.0 in /usr/local/lib/python3.11/dist-packages (from typer<1.0.0,>=0.3.0->spacy<3.9,>=3.8->chatterbot) (1.5.4)\n","Requirement already satisfied: rich>=10.11.0 in /usr/local/lib/python3.11/dist-packages (from typer<1.0.0,>=0.3.0->spacy<3.9,>=3.8->chatterbot) (13.9.4)\n","Requirement already satisfied: cloudpathlib<1.0.0,>=0.7.0 in /usr/local/lib/python3.11/dist-packages (from weasel<0.5.0,>=0.1.0->spacy<3.9,>=3.8->chatterbot) (0.21.1)\n","Requirement already satisfied: smart-open<8.0.0,>=5.2.1 in /usr/local/lib/python3.11/dist-packages (from weasel<0.5.0,>=0.1.0->spacy<3.9,>=3.8->chatterbot) (7.1.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->spacy<3.9,>=3.8->chatterbot) (3.0.2)\n","Requirement already satisfied: marisa-trie>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from language-data>=1.2->langcodes<4.0.0,>=3.2.0->spacy<3.9,>=3.8->chatterbot) (1.2.1)\n","Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.11/dist-packages (from rich>=10.11.0->typer<1.0.0,>=0.3.0->spacy<3.9,>=3.8->chatterbot) (3.0.0)\n","Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.11/dist-packages (from rich>=10.11.0->typer<1.0.0,>=0.3.0->spacy<3.9,>=3.8->chatterbot) (2.19.1)\n","Requirement already satisfied: wrapt in /usr/local/lib/python3.11/dist-packages (from smart-open<8.0.0,>=5.2.1->weasel<0.5.0,>=0.1.0->spacy<3.9,>=3.8->chatterbot) (1.17.2)\n","Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.11/dist-packages (from markdown-it-py>=2.2.0->rich>=10.11.0->typer<1.0.0,>=0.3.0->spacy<3.9,>=3.8->chatterbot) (0.1.2)\n","Downloading chatterbot-1.2.6-py3-none-any.whl (74 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m74.5/74.5 kB\u001b[0m \u001b[31m1.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading mathparse-0.1.5-py3-none-any.whl (8.8 kB)\n","Installing collected packages: mathparse, chatterbot\n","Successfully installed chatterbot-1.2.6 mathparse-0.1.5\n"]}]},{"cell_type":"code","source":["import csv\n","from chatterbot import ChatBot\n","from chatterbot.trainers import Trainer\n","from chatterbot.conversation import Statement"],"metadata":{"id":"VkDidtUtAp1p"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import nltk\n","nltk.download('punkt')\n","nltk.download('stopwords')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jUZzji3GAspJ","executionInfo":{"status":"ok","timestamp":1748572714025,"user_tz":-330,"elapsed":67,"user":{"displayName":"Rajat veer","userId":"09973636553088577408"}},"outputId":"9fa334d7-875c-46da-bf75-61a4fead87ed"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Package punkt is already up-to-date!\n","[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["import logging\n","from chatterbot.storage import StorageAdapter\n","from chatterbot.logic import LogicAdapter\n","from chatterbot.search import TextSearch, IndexedTextSearch\n","from chatterbot.tagging import PosLemmaTagger\n","from chatterbot.conversation import Statement\n","from chatterbot import languages\n","from chatterbot import utils\n","import spacy\n","\n","\n","class ChatBot(object):\n","    \"\"\"\n","    A conversational dialog chat bot.\n","\n","    :param name: A name is the only required parameter for the ChatBot class.\n","    :type name: str\n","\n","    :keyword storage_adapter: The dot-notated import path to a storage adapter class.\n","                              Defaults to ``\"chatterbot.storage.SQLStorageAdapter\"``.\n","    :type storage_adapter: str\n","\n","    :param logic_adapters: A list of dot-notated import paths to each logic adapter the bot uses.\n","                           Defaults to ``[\"chatterbot.logic.BestMatch\"]``.\n","    :type logic_adapters: list\n","\n","    :param tagger: The tagger to use for the chat bot.\n","                   Defaults to :class:`~chatterbot.tagging.PosLemmaTagger`\n","    :type tagger: object\n","\n","    :param tagger_language: The language to use for the tagger.\n","                            Defaults to :class:`~chatterbot.languages.ENG`.\n","    :type tagger_language: object\n","\n","    :param preprocessors: A list of preprocessor functions to use for the chat bot.\n","    :type preprocessors: list\n","\n","    :param read_only: If True, the chat bot will not save any input it receives, defaults to False.\n","    :type read_only: bool\n","\n","    :param logger: A ``Logger`` object.\n","    :type logger: logging.Logger\n","    \"\"\"\n","\n","    def __init__(self, name, **kwargs):\n","        self.name = name\n","\n","        self.logger = kwargs.get('logger', logging.getLogger(__name__))\n","\n","        storage_adapter = kwargs.get('storage_adapter', 'chatterbot.storage.SQLStorageAdapter')\n","\n","        logic_adapters = kwargs.get('logic_adapters', [\n","            'chatterbot.logic.BestMatch'\n","        ])\n","\n","        # Check that each adapter is a valid subclass of it's respective parent\n","        utils.validate_adapter_class(storage_adapter, StorageAdapter)\n","\n","        # Logic adapters used by the chat bot\n","        self.logic_adapters = []\n","\n","        self.storage = utils.initialize_class(storage_adapter, **kwargs)\n","\n","        tagger_language = kwargs.get('tagger_language', languages.ENG)\n","\n","        try:\n","            Tagger = kwargs.get('tagger', PosLemmaTagger)\n","\n","            self.tagger = Tagger(language=tagger_language)\n","        except IOError as io_error:\n","            # Return a more helpful error message if possible\n","            if \"Can't find model\" in str(io_error):\n","                model_name = utils.get_model_for_language(tagger_language)\n","                if hasattr(tagger_language, 'ENGLISH_NAME'):\n","                    language_name = tagger_language.ENGLISH_NAME\n","                else:\n","                    language_name = tagger_language\n","                raise self.ChatBotException(\n","                    'Setup error:\\n'\n","                    f'The Spacy model for \"{language_name}\" language is missing.\\n'\n","                    'Please install the model using the command:\\n\\n'\n","                    f'python -m spacy download {model_name}\\n\\n'\n","                    'See https://spacy.io/usage/models for more information about available models.'\n","                ) from io_error\n","            else:\n","                raise io_error\n","\n","        primary_search_algorithm = IndexedTextSearch(self, **kwargs)\n","        text_search_algorithm = TextSearch(self, **kwargs)\n","\n","        self.search_algorithms = {\n","            primary_search_algorithm.name: primary_search_algorithm,\n","            text_search_algorithm.name: text_search_algorithm\n","        }\n","\n","        for adapter in logic_adapters:\n","            utils.validate_adapter_class(adapter, LogicAdapter)\n","            logic_adapter = utils.initialize_class(adapter, self, **kwargs)\n","            self.logic_adapters.append(logic_adapter)\n","\n","        preprocessors = kwargs.get(\n","            'preprocessors', [\n","                'chatterbot.preprocessors.clean_whitespace'\n","            ]\n","        )\n","\n","        self.preprocessors = []\n","\n","        for preprocessor in preprocessors:\n","            self.preprocessors.append(utils.import_module(preprocessor))\n","\n","        # NOTE: 'xx' is the language code for a multi-language model\n","        self.nlp = spacy.blank(self.tagger.language.ISO_639_1)\n","\n","        # Allow the bot to save input it receives so that it can learn\n","        self.read_only = kwargs.get('read_only', False)\n","\n","    def get_response(self, statement=None, **kwargs) -> Statement:\n","        \"\"\"\n","        Return the bot's response based on the input.\n","\n","        :param statement: An statement object or string.\n","        :returns: A response to the input.\n","\n","        :param additional_response_selection_parameters: Parameters to pass to the\n","            chat bot's logic adapters to control response selection.\n","        :type additional_response_selection_parameters: dict\n","\n","        :param persist_values_to_response: Values that should be saved to the response\n","            that the chat bot generates.\n","        :type persist_values_to_response: dict\n","        \"\"\"\n","        Statement = self.storage.get_object('statement')\n","\n","        additional_response_selection_parameters = kwargs.pop('additional_response_selection_parameters', {})\n","\n","        persist_values_to_response = kwargs.pop('persist_values_to_response', {})\n","\n","        if isinstance(statement, str):\n","            kwargs['text'] = statement\n","\n","        if isinstance(statement, dict):\n","            kwargs.update(statement)\n","\n","        if statement is None and 'text' not in kwargs:\n","            raise self.ChatBotException(\n","                'Either a statement object or a \"text\" keyword '\n","                'argument is required. Neither was provided.'\n","            )\n","\n","        if hasattr(statement, 'serialize'):\n","            kwargs.update(**statement.serialize())\n","\n","        tags = kwargs.pop('tags', [])\n","\n","        text = kwargs.pop('text')\n","\n","        input_statement = Statement(text=text, **kwargs)\n","\n","        input_statement.add_tags(*tags)\n","\n","        # Preprocess the input statement\n","        for preprocessor in self.preprocessors:\n","            input_statement = preprocessor(input_statement)\n","\n","        # Mark the statement as being a response to the previous\n","        if input_statement.in_response_to is None:\n","            previous_statement = self.get_latest_response(input_statement.conversation)\n","            if previous_statement:\n","                input_statement.in_response_to = previous_statement.text\n","\n","        # Make sure the input statement has its search text saved\n","\n","        if not input_statement.search_text:\n","            _search_text = self.tagger.get_text_index_string(input_statement.text)\n","            input_statement.search_text = _search_text\n","\n","        if not input_statement.search_in_response_to and input_statement.in_response_to:\n","            input_statement.search_in_response_to = self.tagger.get_text_index_string(\n","                input_statement.in_response_to\n","            )\n","\n","        response = self.generate_response(\n","            input_statement,\n","            additional_response_selection_parameters\n","        )\n","\n","        # Update any response data that needs to be changed\n","        if persist_values_to_response:\n","            for response_key in persist_values_to_response:\n","                response_value = persist_values_to_response[response_key]\n","                if response_key == 'tags':\n","                    input_statement.add_tags(*response_value)\n","                    response.add_tags(*response_value)\n","                else:\n","                    setattr(input_statement, response_key, response_value)\n","                    setattr(response, response_key, response_value)\n","\n","        if not self.read_only:\n","\n","            # Save the input statement\n","            self.storage.create(**input_statement.serialize())\n","\n","            # Save the response generated for the input\n","            self.learn_response(response, previous_statement=input_statement)\n","\n","\n","        return response\n","\n","    def generate_response(self, input_statement, additional_response_selection_parameters=None):\n","        \"\"\"\n","        Return a response based on a given input statement.\n","\n","        :param input_statement: The input statement to be processed.\n","        \"\"\"\n","        Statement = self.storage.get_object('statement')\n","\n","        results = []\n","        result = None\n","        max_confidence = -1\n","\n","        for adapter in self.logic_adapters:\n","            if adapter.can_process(input_statement):\n","\n","                output = adapter.process(input_statement, additional_response_selection_parameters)\n","                results.append(output)\n","\n","                self.logger.info(\n","                    '{} selected \"{}\" as a response with a confidence of {}'.format(\n","                        adapter.class_name, output.text, output.confidence\n","                    )\n","                )\n","\n","                if output.confidence > max_confidence:\n","                    result = output\n","                    max_confidence = output.confidence\n","            else:\n","                self.logger.info(\n","                    'Not processing the statement using {}'.format(adapter.class_name)\n","                )\n","\n","        class ResultOption:\n","            def __init__(self, statement, count=1):\n","                self.statement = statement\n","                self.count = count\n","\n","        # If multiple adapters agree on the same statement,\n","        # then that statement is more likely to be the correct response\n","        if len(results) >= 3:\n","            result_options = {}\n","            for result_option in results:\n","                result_string = result_option.text + ':' + (result_option.in_response_to or '')\n","\n","                if result_string in result_options:\n","                    result_options[result_string].count += 1\n","                    if result_options[result_string].statement.confidence < result_option.confidence:\n","                        result_options[result_string].statement = result_option\n","                else:\n","                    result_options[result_string] = ResultOption(\n","                        result_option\n","                    )\n","\n","            most_common = list(result_options.values())[0]\n","\n","            for result_option in result_options.values():\n","                if result_option.count > most_common.count:\n","                    most_common = result_option\n","\n","            self.logger.info('Selecting \"{}\" as the most common response'.format(most_common.statement.text))\n","\n","            if most_common.count > 1:\n","                result = most_common.statement\n","\n","        response = Statement(\n","            text=result.text,\n","            in_response_to=input_statement.text,\n","            conversation=input_statement.conversation,\n","            persona='bot:' + self.name\n","        )\n","\n","        response.add_tags(*result.get_tags())\n","\n","        response.confidence = result.confidence\n","\n","        return response\n","\n","    def learn_response(self, statement, previous_statement=None):\n","        \"\"\"\n","        Learn that the statement provided is a valid response.\n","        \"\"\"\n","        if not previous_statement:\n","            previous_statement = statement.in_response_to\n","\n","        if not previous_statement:\n","            previous_statement = self.get_latest_response(statement.conversation)\n","            if previous_statement:\n","                previous_statement = previous_statement.text\n","\n","        previous_statement_text = previous_statement\n","\n","        if not isinstance(previous_statement, (str, type(None), )):\n","            statement.in_response_to = previous_statement.text\n","        elif isinstance(previous_statement, str):\n","            statement.in_response_to = previous_statement\n","\n","        self.logger.info('Adding \"{}\" as a response to \"{}\"'.format(\n","            previous_statement_text,\n","            statement.text\n","        ))\n","\n","        if not statement.persona:\n","            statement.persona = 'bot:' + self.name\n","\n","        # Save the response statement\n","        return self.storage.create(**statement.serialize())\n","\n","    def get_latest_response(self, conversation: str):\n","        \"\"\"\n","        Returns the latest response in a conversation if it exists.\n","        Returns None if a matching conversation cannot be found.\n","        \"\"\"\n","        from chatterbot.conversation import Statement as StatementObject\n","\n","        conversation_statements = list(self.storage.filter(\n","            conversation=conversation,\n","            order_by=['id']\n","        ))\n","\n","        # Get the most recent statement in the conversation if one exists\n","        latest_statement = conversation_statements[-1] if len(conversation_statements) else None\n","\n","        return latest_statement\n","\n","    class ChatBotException(Exception):\n","        pass\n"],"metadata":{"id":"QhgonE1vEu4R"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["chatbot = ChatBot('CSVBot',storage_adapter='chatterbot.storage.SQLStorageAdapter', raise_on_missing_search_text=False)\n","trainer = CSVTrainer(chatbot)\n","trainer.train('/content/chat_data.csv')"],"metadata":{"id":"vg1-07u3A5bp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["response = chatbot.get_response(' Are you a fan of Google or Microsoft?')\n","print(response)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"NuR0yKlBGXGK","executionInfo":{"status":"error","timestamp":1748574074839,"user_tz":-330,"elapsed":1485,"user":{"displayName":"Rajat veer","userId":"09973636553088577408"}},"outputId":"3072eca5-613a-4d02-d51b-a04b1df7c7c5"},"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-34-be8b3c1bcbe9>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mchatbot\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_response\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m' Are you a fan of Google or Microsoft?'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresponse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-31-33a94e04fd12>\u001b[0m in \u001b[0;36mget_response\u001b[0;34m(self, statement, **kwargs)\u001b[0m\n\u001b[1;32m    166\u001b[0m         \u001b[0;31m# Mark the statement as being a response to the previous\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    167\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0minput_statement\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0min_response_to\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 168\u001b[0;31m             \u001b[0mprevious_statement\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_latest_response\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_statement\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconversation\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    169\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mprevious_statement\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    170\u001b[0m                 \u001b[0minput_statement\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0min_response_to\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprevious_statement\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-31-33a94e04fd12>\u001b[0m in \u001b[0;36mget_latest_response\u001b[0;34m(self, conversation)\u001b[0m\n\u001b[1;32m    322\u001b[0m         \u001b[0;32mfrom\u001b[0m \u001b[0mchatterbot\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconversation\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mStatement\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mStatementObject\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    323\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 324\u001b[0;31m         conversation_statements = list(self.storage.filter(\n\u001b[0m\u001b[1;32m    325\u001b[0m             \u001b[0mconversation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mconversation\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    326\u001b[0m             \u001b[0morder_by\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'id'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/chatterbot/storage/sql_storage.py\u001b[0m in \u001b[0;36mfilter\u001b[0;34m(self, **kwargs)\u001b[0m\n\u001b[1;32m    202\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mstart_index\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtotal_statements\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpage_size\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    203\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mstatement\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mstatements\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mslice\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstart_index\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstart_index\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mpage_size\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 204\u001b[0;31m                 \u001b[0;32myield\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodel_to_object\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstatement\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    205\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    206\u001b[0m         \u001b[0msession\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/chatterbot/storage/sql_storage.py\u001b[0m in \u001b[0;36mmodel_to_object\u001b[0;34m(self, statement)\u001b[0m\n\u001b[1;32m     89\u001b[0m         \u001b[0;32mfrom\u001b[0m \u001b[0mchatterbot\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconversation\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mStatement\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mStatementObject\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     90\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 91\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mStatementObject\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mstatement\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mserialize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     92\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     93\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mcount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/chatterbot/conversation.py\u001b[0m in \u001b[0;36mserialize\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     53\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mformat_method\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 55\u001b[0;31m                 \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mfield_name\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mformat_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     56\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     57\u001b[0m                 \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mfield_name\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfield_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/chatterbot/ext/sqlalchemy_app/models.py\u001b[0m in \u001b[0;36mget_tags\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    104\u001b[0m         \u001b[0mReturn\u001b[0m \u001b[0ma\u001b[0m \u001b[0mlist\u001b[0m \u001b[0mof\u001b[0m \u001b[0mtags\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mthis\u001b[0m \u001b[0mstatement\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    105\u001b[0m         \"\"\"\n\u001b[0;32m--> 106\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mtag\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mtag\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtags\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    107\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    108\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0madd_tags\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mtags\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sqlalchemy/orm/attributes.py\u001b[0m in \u001b[0;36m__get__\u001b[0;34m(self, instance, owner)\u001b[0m\n\u001b[1;32m    564\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mAttributeError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    565\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0morm_exc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mUnmappedInstanceError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minstance\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 566\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimpl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdict_\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[no-any-return]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    567\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    568\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sqlalchemy/orm/attributes.py\u001b[0m in \u001b[0;36mget\u001b[0;34m(self, state, dict_, passive)\u001b[0m\n\u001b[1;32m   1084\u001b[0m                     \u001b[0;32mreturn\u001b[0m \u001b[0mPASSIVE_NO_RESULT\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1085\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1086\u001b[0;31m                 \u001b[0mvalue\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fire_loader_callables\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpassive\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1087\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1088\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mvalue\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0mPASSIVE_NO_RESULT\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mvalue\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0mNO_VALUE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sqlalchemy/orm/attributes.py\u001b[0m in \u001b[0;36m_fire_loader_callables\u001b[0;34m(self, state, key, passive)\u001b[0m\n\u001b[1;32m   1119\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mcallable_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpassive\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1120\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcallable_\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1121\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcallable_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpassive\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1122\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1123\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mATTR_EMPTY\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sqlalchemy/orm/strategies.py\u001b[0m in \u001b[0;36m_load_for_state\u001b[0;34m(self, state, passive, loadopt, extra_criteria, extra_options, alternate_effective_path, execution_options)\u001b[0m\n\u001b[1;32m    976\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mLoaderCallableStatus\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mPASSIVE_NO_RESULT\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    977\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 978\u001b[0;31m         return self._emit_lazyload(\n\u001b[0m\u001b[1;32m    979\u001b[0m             \u001b[0msession\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    980\u001b[0m             \u001b[0mstate\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sqlalchemy/orm/strategies.py\u001b[0m in \u001b[0;36m_emit_lazyload\u001b[0;34m(self, session, state, primary_key_identity, passive, loadopt, extra_criteria, extra_options, alternate_effective_path, execution_options)\u001b[0m\n\u001b[1;32m   1139\u001b[0m         \u001b[0mstmt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_where_criteria\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mlazy_clause\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1140\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1141\u001b[0;31m         result = session.execute(\n\u001b[0m\u001b[1;32m   1142\u001b[0m             \u001b[0mstmt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexecution_options\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mexecution_options\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1143\u001b[0m         )\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sqlalchemy/orm/session.py\u001b[0m in \u001b[0;36mexecute\u001b[0;34m(self, statement, params, execution_options, bind_arguments, _parent_execute_state, _add_event)\u001b[0m\n\u001b[1;32m   2363\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2364\u001b[0m         \"\"\"\n\u001b[0;32m-> 2365\u001b[0;31m         return self._execute_internal(\n\u001b[0m\u001b[1;32m   2366\u001b[0m             \u001b[0mstatement\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2367\u001b[0m             \u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sqlalchemy/orm/session.py\u001b[0m in \u001b[0;36m_execute_internal\u001b[0;34m(self, statement, params, execution_options, bind_arguments, _parent_execute_state, _add_event, _scalar_result)\u001b[0m\n\u001b[1;32m   2249\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2250\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcompile_state_cls\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2251\u001b[0;31m             result: Result[Any] = compile_state_cls.orm_execute_statement(\n\u001b[0m\u001b[1;32m   2252\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2253\u001b[0m                 \u001b[0mstatement\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sqlalchemy/orm/context.py\u001b[0m in \u001b[0;36morm_execute_statement\u001b[0;34m(cls, session, statement, params, execution_options, bind_arguments, conn)\u001b[0m\n\u001b[1;32m    307\u001b[0m             \u001b[0mstatement\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparams\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexecution_options\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mexecution_options\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    308\u001b[0m         )\n\u001b[0;32m--> 309\u001b[0;31m         return cls.orm_setup_cursor_result(\n\u001b[0m\u001b[1;32m    310\u001b[0m             \u001b[0msession\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    311\u001b[0m             \u001b[0mstatement\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sqlalchemy/orm/context.py\u001b[0m in \u001b[0;36morm_setup_cursor_result\u001b[0;34m(cls, session, statement, params, execution_options, bind_arguments, result)\u001b[0m\n\u001b[1;32m    614\u001b[0m             \u001b[0mbind_arguments\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    615\u001b[0m         )\n\u001b[0;32m--> 616\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mloading\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minstances\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mquerycontext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    617\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    618\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sqlalchemy/orm/loading.py\u001b[0m in \u001b[0;36minstances\u001b[0;34m(cursor, context)\u001b[0m\n\u001b[1;32m    181\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mgo\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    182\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 183\u001b[0;31m     unique_filters = [\n\u001b[0m\u001b[1;32m    184\u001b[0m         (\n\u001b[1;32m    185\u001b[0m             \u001b[0m_no_unique\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sqlalchemy/orm/loading.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    181\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mgo\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    182\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 183\u001b[0;31m     unique_filters = [\n\u001b[0m\u001b[1;32m    184\u001b[0m         (\n\u001b[1;32m    185\u001b[0m             \u001b[0m_no_unique\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","source":[],"metadata":{"id":"EXSycEmaJsQD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"XGJQhoH1Jsgj"},"execution_count":null,"outputs":[]}]}